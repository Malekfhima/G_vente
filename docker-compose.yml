version: '3.8'

services:
  # Base de données PostgreSQL
  # (Optionnel) Base de données PostgreSQL — désactivée par défaut car le schéma utilise SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: gestion_vente_db
  #   environment:
  #     POSTGRES_DB: gestion_vente
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - gestion_vente_network

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gestion_vente_backend
    environment:
      NODE_ENV: production
      # Utiliser SQLite par défaut (aligné avec schema.prisma)
      DATABASE_URL: file:./dev.db
      JWT_SECRET: votre_secret_jwt_tres_securise_ici
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    # depends_on:
    #   - postgres
    networks:
      - gestion_vente_network
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gestion_vente_frontend
    environment:
      # Utiliser le service backend comme hôte depuis le réseau docker
      VITE_API_URL: http://backend:5000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - gestion_vente_network
    restart: unless-stopped

  # Nginx (optionnel - pour la production)
  # Nginx (optionnel - pour la production) — non requis si l'image frontend sert déjà les fichiers
  # nginx:
  #   image: nginx:alpine
  #   container_name: gestion_vente_nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./frontend/dist:/usr/share/nginx/html
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - gestion_vente_network
  #   restart: unless-stopped

volumes:
  # postgres_data:

networks:
  gestion_vente_network:
    driver: bridge

